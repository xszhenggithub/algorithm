#include<iostream>
#include<stack>
#include<cstring>
using namespace std;

//算符  (  )  +  -  *  /  # 
//栈中  1  6  3  3  5  5  0                
//当前  6  1  2  2  4  4  0        

int isp(char op)
{
	switch(op)
	{
		case '(':return 1;
		case ')':return 6;
		case '+':return 3;
		case '-':return 3;
		case '*':return 5;
		case '/':return 5;
		case '#':return 0;
		default :return -1;
	}
}

int icp(char op)
{
	switch(op)
	{
		case '(':return 6;
		case ')':return 1;
		case '+':return 2;
		case '-':return 2;
		case '*':return 4;
		case '/':return 4;
		case '#':return 0;
		default :return -1;
	}
}

int calculate(int num1,char op,int num2)
{
	switch(op)
	{
		case '+':return num1+num2;
		case '-':return num1-num2;
		case '*':return num1*num2;
		case '/':return num1/num2;
	}
}
int main()
{
	char ch;
	stack<int> stknum;
	stack<char> stkop;
	stkop.push('#');
	
	char exp[128];
	cin.getline(exp,128);
	int i=0;
	while(i<strlen(exp))
	{
		ch = exp[i];
		if(isdigit(ch)) stknum.push(ch-'0'),i++; //数字进栈 
		else if(icp(ch) > isp(stkop.top())) stkop.push(ch),i++; //当前运算符比栈顶运算符优先级大 
		else if(icp(ch) < isp(stkop.top())) 					//当前运算符比栈顶运算符优先级小 
		{
			int num2 = stknum.top();stknum.pop();
			int num1 = stknum.top();stknum.pop();
			char op = stkop.top();stkop.pop();
			stknum.push(calculate(num1,op,num2));
		}
		else stkop.pop(),i++;
	}
	
	cout<<stknum.top()<<endl;
	
    return 0;
}

